//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace com.taptap.tapsdk.bindings.csharp {

public class BridgeConfig : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BridgeConfig(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BridgeConfig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BridgeConfig() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BindingsPINVOKE.delete_BridgeConfig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public bool enable_duration_statistics {
    set {
      BindingsPINVOKE.BridgeConfig_enable_duration_statistics_set(swigCPtr, value);
    } 
    get {
      bool ret = BindingsPINVOKE.BridgeConfig_enable_duration_statistics_get(swigCPtr);
      return ret;
    } 
  }

  public int region {
    set {
      BindingsPINVOKE.BridgeConfig_region_set(swigCPtr, value);
    } 
    get {
      int ret = BindingsPINVOKE.BridgeConfig_region_get(swigCPtr);
      return ret;
    } 
  }

  public string device_id {
    set {
      BindingsPINVOKE.BridgeConfig_device_id_set(swigCPtr, value);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = BindingsPINVOKE.BridgeConfig_device_id_get(swigCPtr);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string cache_dir {
    set {
      BindingsPINVOKE.BridgeConfig_cache_dir_set(swigCPtr, value);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = BindingsPINVOKE.BridgeConfig_cache_dir_get(swigCPtr);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string ca_dir {
    set {
      BindingsPINVOKE.BridgeConfig_ca_dir_set(swigCPtr, value);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = BindingsPINVOKE.BridgeConfig_ca_dir_get(swigCPtr);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int device_type {
    set {
      BindingsPINVOKE.BridgeConfig_device_type_set(swigCPtr, value);
    } 
    get {
      int ret = BindingsPINVOKE.BridgeConfig_device_type_get(swigCPtr);
      return ret;
    } 
  }

  public string model {
    set {
      BindingsPINVOKE.BridgeConfig_model_set(swigCPtr, value);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = BindingsPINVOKE.BridgeConfig_model_get(swigCPtr);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string platform {
    set {
      BindingsPINVOKE.BridgeConfig_platform_set(swigCPtr, value);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = BindingsPINVOKE.BridgeConfig_platform_get(swigCPtr);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string engine {
    set {
      BindingsPINVOKE.BridgeConfig_engine_set(swigCPtr, value);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = BindingsPINVOKE.BridgeConfig_engine_get(swigCPtr);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string sdk_version {
    set {
      BindingsPINVOKE.BridgeConfig_sdk_version_set(swigCPtr, value);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = BindingsPINVOKE.BridgeConfig_sdk_version_get(swigCPtr);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public BridgeConfig() : this(BindingsPINVOKE.new_BridgeConfig(), true) {
  }

}

}
