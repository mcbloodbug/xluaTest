//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace com.taptap.tapsdk.bindings.csharp {

public class BridgeGame : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BridgeGame(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BridgeGame obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BridgeGame() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          BindingsPINVOKE.delete_BridgeGame(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public string client_id {
    set {
      BindingsPINVOKE.BridgeGame_client_id_set(swigCPtr, value);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = BindingsPINVOKE.BridgeGame_client_id_get(swigCPtr);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string identify {
    set {
      BindingsPINVOKE.BridgeGame_identify_set(swigCPtr, value);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = BindingsPINVOKE.BridgeGame_identify_get(swigCPtr);
      if (BindingsPINVOKE.SWIGPendingException.Pending) throw BindingsPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public BridgeGame() : this(BindingsPINVOKE.new_BridgeGame(), true) {
  }

}

}
